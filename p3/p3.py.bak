#!/usr/bin/python2

# Calendar
from __future__ import print_function
import datetime
import pickle
import os.path
import rfc3339
import iso8601
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

# GUI
import Tkinter as tk

# serial
import serial

# audio
import pygame

SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

start_time = datetime.datetime.now()
pygame.mixer.init()
ser = serial.Serial('/dev/ttyACM0', 9600, timeout=1)
ser.flush()

def millis(timestamp = datetime.datetime.now()):
    diff = timestamp - start_time
    return int(diff.total_seconds() * 1000)

# Calendar functions ################################################
def get_date_object(date_string):
  return iso8601.parse_date(date_string)

def get_date_string(date_object):
  return rfc3339.rfc3339(date_object)

def add_events(events, calevents):
    for event in events:
        new_start = event['start'].get('dateTime')
        if not new_start:
            continue
        added = False
        for i in range(0, len(calevents)):
            ev_start = calevents[i]['start'].get('dateTime')
            if new_start < ev_start:
                calevents.insert(i, event)
                added = True
                break
        if not added:
            calevents.append(event)
            
def build_schedule(calevents):
    alarm_events = []
    for i in range(1, len(calevents)):
        curr_start = get_date_object(calevents[i]['start'].get('dateTime'))
        prev_end = get_date_object(calevents[i - 1]['end'].get('dateTime'))
        td = curr_start - prev_end
        for j in xrange(300, int(td.total_seconds()), 3600):
            stime = prev_end + datetime.timedelta(seconds=j)
            if (stime.hour > 21) or (stime.hour < 9): # No alarms after 9pm or before 9am
                continue
            alarm_events.append({'summary': 'Alarm!', 'start': {'dateTime': get_date_string(stime)}, 'end': {'dateTime': get_date_string(stime + datetime.timedelta(seconds=5))}})
    add_events(alarm_events)

def get_next_alarm(services):
    calevents = []
    # Call the Calendar API
    now = datetime.datetime.utcnow().isoformat() + 'Z' # 'Z' indicates UTC time
    print('Reading calendars...')
    for service in services:
        events_result = service.events().list(calendarId='primary',
                                              timeMin=now,
                                              maxResults=10,
                                              singleEvents=True,
                                              orderBy='startTime').execute()
        events = events_result.get('items', [])
        add_events(events, calevents)
    ts_end = datetime.now()
    for i in range(0, len(calevents)):
        ts_start = get_date_object(calevents[i]['start'].get('dateTime'))
        if ts_start >= datetime.now():
            return ts_start
        ts_end = get_date_object(calevents[i]['end'].get('dateTime'))
    # Hmm, not expected to get here. Maybe busy calendar?
    return ts_end


def calendar_authenticate():
    services = []
    print("Authenticating...")
    for ctype in cred_types:
        creds = None
        ptoken_name = ctype + '_token.pickle'
        # The file token.pickle stores the user's access and refresh tokens, and is
        # created automatically when the authorization flow completes for the first
        # time.
        if os.path.exists(ptoken_name):
            with open(ptoken_name, 'rb') as token:
                creds = pickle.load(token)
        # If there are no (valid) credentials available, let the user log in.
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file('work_credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
            # Save the credentials for the next run
            with open(ptoken_name, 'wb') as token:
                pickle.dump(creds, token)

        service = build('calendar', 'v3', credentials=creds)
        services.append(service)
    return services


# Audio functions ###################################################

def play_music(musicfile):
    pygame.mixer.music.load(musicfile)
    pygame.mixer.music.play()

def stop_music():
    pygame.mixer.music.stop()
    
def is_music_playing():
    return pygame.mixer.music.get_busy()
    

# GUI functions #####################################################

class AlarmWindow(tk.Frame):
    def on_press(self):
        self.quit()

    def __init__(self, parent):
        tk.Frame.__init__(self, parent)
        self.pack()
        self.button = tk.Button(self, text="Stand up and shake a leg!", font=(None, 24), command=self.on_press, width=300, height=300)
        self.button.pack()
        

def display_alarm():
    root = tk.Tk()
    root.title("Get moving!")
    root.geometry("800x600")
    app = AlarmWindow(root)
    app.mainloop()
    app.destroy()
    root.destroy()
  
    
# Light sensor functions ############################################

class LightSensor:
    is_dark = False
    hysteresis = 0
    hist_wait = 10

    def new_val(self, val):
        new_dark = False
        changed = False
        if val == "dark":
            new_dark = True
        elif val == "light":
            new_dark = False

        if new_dark != self.is_dark:
            self.hysteresis += 1
            if self.hysteresis == self.hist_wait:
                if new_dark:
                    print("> dark")
                else:
                    print("> light")
                self.is_dark = new_dark
                self.hysteresis = 0
                changed = True
        else:
            self.hysteresis = 0

        return changed

    def get_dark_status(self):
        return self.is_dark


# Main program ######################################################

def alarm():
    play_music('music/yakety.mp3')
    display_alarm()
    stop_music()

cal_services = calendar_authenticate()
next_alarm = millis(get_next_alarm(cal_services))

while True:
    if ser.in_waiting > 0:
        status = ser.readline().decode('utf-8', 'replace').rstrip()
        ls.new_val(status)
    now = millis()
    if now % 1000 == 0: # Stuff to do every second
        if (next_alarm <= now) and not ls.get_dark_status:
            # Sound the alarm!!
            alarm()
            
    if now % 10000 == 0: # Stuff to do every 10 seconds
        next_alarm = millis(get_next_alarm(cal_services))
   	


